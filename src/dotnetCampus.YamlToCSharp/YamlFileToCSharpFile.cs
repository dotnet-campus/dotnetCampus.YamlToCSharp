using System;
using System.IO;
using System.Text;
using YamlDotNet.RepresentationModel;

namespace dotnetCampus.YamlToCSharp
{
    /// <summary>
    /// 将 Yaml 文件转换为 CSharp 文件
    /// </summary>
    public class YamlFileToCSharpFile
    {
        /// <summary>
        /// 将 Yaml 文件转换为 CSharp 文件
        /// </summary>
        /// <param name="yamlFile"></param>
        /// <param name="saveCSharpFile"></param>
        /// <param name="classNamespace">类命名空间</param>
        /// <param name="interfaceName">继承的接口</param>
        /// <param name="className">类名</param>
        /// <param name="methodName"></param>
        /// <param name="toolVersion">当前的代码生成工具的版本</param>
        public void ParseToCSharpFile(FileInfo yamlFile, FileInfo saveCSharpFile,
            string classNamespace = "dotnetCampus.Localizations",
            string interfaceName = "",
            string className = "",
            string methodName = "GetLang",
            string? toolVersion = null)
        {
            if (string.IsNullOrEmpty(className))
            {
                className = Path.GetFileNameWithoutExtension(saveCSharpFile.FullName);
            }

            var code = YamlFileToCsharpCode(yamlFile, classNamespace, interfaceName, className, methodName, toolVersion);

            Directory.CreateDirectory(saveCSharpFile.DirectoryName!);
            TryToWriteFile(saveCSharpFile, code);
        }

        /// <summary>
        /// 从 YAML 文件转换为 C# 代码
        /// </summary>
        /// <param name="yamlFile"></param>
        /// <param name="classNamespace">类命名空间</param>
        /// <param name="interfaceName">继承的接口</param>
        /// <param name="className">类名</param>
        /// <param name="methodName"></param>
        /// <param name="toolVersion">当前的代码生成工具的版本</param>
        /// <returns>转换输出的 C# 代码</returns>
        public string YamlFileToCsharpCode(FileInfo yamlFile, 
            string classNamespace = "dotnetCampus.Localizations",
            string interfaceName = "",
            string className = "",
            string methodName = "GetLang",
            string? toolVersion = null)
        {
            if (string.IsNullOrEmpty(className))
            {
                className = Path.GetFileNameWithoutExtension(yamlFile.FullName);
            }

            var yamlText = File.ReadAllText(yamlFile.FullName);
            return YamlToCsharpCode(yamlText, className, classNamespace, interfaceName, methodName, toolVersion);
        }

        /// <summary>
        /// 从 YAML 文本转换为 C# 代码
        /// </summary>
        /// <param name="yamlText"></param>
        /// <param name="classNamespace">类命名空间</param>
        /// <param name="interfaceName">继承的接口</param>
        /// <param name="className">类名</param>
        /// <param name="methodName"></param>
        /// <param name="toolVersion">当前的代码生成工具的版本</param>
        /// <returns>转换输出的 C# 代码</returns>
        public string YamlToCsharpCode(string yamlText,
            string className,
            string classNamespace = "dotnetCampus.Localizations",
            string interfaceName = "",
            string methodName = "GetLang",
            string? toolVersion = null)
        {
            var yaml = new YamlStream();

            yaml.Load(new StringReader(yamlText));

            var yamlToCSharpDictionary = new YamlToCSharpDictionary();
            var dictionary = yamlToCSharpDictionary.ParseToCSharp(yaml);

            if (!string.IsNullOrEmpty(interfaceName))
            {
                if (!interfaceName.StartsWith(":"))
                {
                    interfaceName = $": {interfaceName}";
                }
            }

            var code = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace {classNamespace}
{{
    [System.CodeDom.Compiler.GeneratedCode(""dotnetCampus.YamlToCSharp"", ""{toolVersion ?? "1.0.0"}"")]
    public class {className} {interfaceName}
    {{
        public Dictionary<string, string> {methodName}()
        {{
            return {dictionary};
        }}
    }}
}}";
            return code;
        }

        private void TryToWriteFile(FileInfo saveCSharpFile, string codeText)
        {
            if (File.Exists(saveCSharpFile.FullName))
            {
                // 如果旧的存在，去掉 \r 再判断一下是否相等，如果相等就不需要重复的写入，从而提示增量构建性能
                var newCodeText = codeText.Replace("\r", "");
                var oldText = File.ReadAllText(saveCSharpFile.FullName);
                oldText = oldText.Replace("\r", "");
                if (oldText == newCodeText)
                {
                    Console.WriteLine("文件没有改变，不需要写入");
                    return;
                }
            }

            File.WriteAllText(saveCSharpFile.FullName, codeText, Encoding.UTF8);
        }
    }
}